{"version":3,"sources":["components/App/App.jsx","actions/startingCell.js","actions/currentCell.js","actions/arrows.js","reducers/startCellReducer.js","reducers/currentCellReducer.js","reducers/arrowsReducer.js","store.js","index.js"],"names":["mapDispatch","setStartingCell","id","type","payload","setCurrentCell","setArrow","arrowDirection","count","connect","state","startingCell","currentCell","arrows","alphabet","useState","setCount","gameStatus","setGameStatus","lostCell","setLostCell","useEffect","setTimeout","window","confirm","location","reload","axisX","Math","round","random","axisY","moveDirection","coordinateAxis","selectedCell","split","axisValue","join","showResult","e","target","dataset","className","Array","fill","map","elem","index","key","columnIndex","data-id","onClick","initialState","arrowsReducer","action","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.e4797a09.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setStartingCell } from '../../actions/startingCell';\r\nimport { setCurrentCell } from '../../actions/currentCell';\r\nimport { setArrow } from '../../actions/arrows';\r\nimport './app.scss';\r\n\r\nconst App = ({ setStartingCell, startingCell, setCurrentCell, currentCell, setArrow, arrows }) => {\r\n    const alphabet = [\"a\", \"b\", \"c\"];\r\n    const [count, setCount] = useState(0);\r\n    const [gameStatus, setGameStatus] = useState('game');\r\n    const [lostCell, setLostCell] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (gameStatus === 'you lost' || gameStatus === 'you won') {\r\n            setTimeout(() => {\r\n                let replay = window.confirm('Do you want to replay?')\r\n                if (replay) {\r\n                    window.location.reload()\r\n                }\r\n            }, 2000)\r\n        }\r\n    }, [gameStatus])\r\n\r\n    useEffect(() => {\r\n        if (!startingCell) {\r\n            const axisX = Math.round(1 - 0.5 + Math.random() * 3);\r\n            const axisY = Math.round(1 - 0.5 + Math.random() * 3);\r\n            setStartingCell(`${axisX}${axisY}`);\r\n            setCurrentCell(`${axisX}${axisY}`);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (count >= 10) {\r\n            setGameStatus('your turn')\r\n            return\r\n        }\r\n\r\n        if (!currentCell) {\r\n            return\r\n        }\r\n\r\n        setCount(count + 1)\r\n\r\n        setTimeout(() => {\r\n            let moveDirection = Math.round(1 - 0.5 + Math.random() * 2);\r\n            let coordinateAxis = Math.round(1 - 0.5 + Math.random() * 2);\r\n            if (moveDirection === 2) moveDirection = -1;\r\n\r\n            let selectedCell = currentCell.split('')\r\n            let axisValue = +selectedCell[coordinateAxis - 1]\r\n\r\n            selectedCell[coordinateAxis - 1] = axisValue + moveDirection;\r\n            if (+selectedCell[coordinateAxis - 1] < 1) {\r\n                selectedCell[coordinateAxis - 1] = axisValue + 1;\r\n            }\r\n            if (+selectedCell[coordinateAxis - 1] > 3) {\r\n                selectedCell[coordinateAxis - 1] = axisValue - 1\r\n            }\r\n\r\n            if (coordinateAxis === 2 && +selectedCell[coordinateAxis - 1] < axisValue) {\r\n                setArrow('up', count)\r\n            }\r\n\r\n            if (coordinateAxis === 2 && +selectedCell[coordinateAxis - 1] > axisValue) {\r\n                setArrow('down', count)\r\n            }\r\n\r\n            if (coordinateAxis === 1 && +selectedCell[coordinateAxis - 1] < axisValue) {\r\n                setArrow('left', count)\r\n            }\r\n\r\n            if (coordinateAxis === 1 && +selectedCell[coordinateAxis - 1] > axisValue) {\r\n                setArrow('right', count)\r\n            }\r\n\r\n            if (count >= 10) setGameStatus('your turn')\r\n            setCurrentCell(selectedCell.join(''))\r\n        }, 1000)\r\n    }, [currentCell])\r\n\r\n    const showResult = e => {\r\n        if (gameStatus === 'game' || gameStatus === 'you lost') return;\r\n        setStartingCell('');\r\n        if (e.target.dataset.id !== currentCell && gameStatus !== 'you won') {\r\n            setGameStatus('you lost')\r\n            setLostCell(e.target.dataset.id)\r\n        }\r\n        if (e.target.dataset.id === currentCell && gameStatus !== 'you lost') {\r\n            setGameStatus('you won');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"page\">\r\n            <div className=\"maze\">\r\n                <div className=\"maze__row-numbers\">\r\n                    {new Array(3).fill('').map((elem, index) => {\r\n                        return (\r\n                            <div className=\"maze__row-numbers_item\" key={index}>\r\n                                {index + 1}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                {new Array(3).fill('').map((elem, columnIndex) => {\r\n                    return (\r\n                        <div className=\"maze__column\" key={columnIndex} >\r\n                            <div className=\"maze__column-number\">\r\n                                {alphabet[columnIndex]}\r\n                            </div>\r\n                            {\r\n                                new Array(3).fill('').map((elem, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className=\"maze__cell\"\r\n                                            key={index}\r\n                                            data-id={`${columnIndex + 1}${index + 1}`}\r\n                                            onClick={showResult}\r\n                                        >\r\n                                            {startingCell === `${columnIndex + 1}${index + 1}` && 'START'}\r\n                                            {currentCell === `${columnIndex + 1}${index + 1}` && gameStatus === 'you won' ? gameStatus : ''}\r\n                                            {lostCell === `${columnIndex + 1}${index + 1}` && gameStatus}\r\n                                            {currentCell === `${columnIndex + 1}${index + 1}` && gameStatus === 'you lost' ? 'that`s it' : ''}\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div >\r\n            <div className=\"arrows-container\">\r\n                {\r\n                    [...arrows].map((elem, index) => {\r\n                        return (\r\n                            <div className=\"arrows-container__arrow\" key={index}>\r\n                                <i className={`fas fa-arrow-${elem}`}></i>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapState = (state) => ({\r\n    startingCell: state.startingCell.startingCell,\r\n    currentCell: state.currentCell.currentCell,\r\n    arrows: state.arrows.arrows,\r\n})\r\n\r\nconst mapDispatch = {\r\n    setStartingCell,\r\n    setCurrentCell,\r\n    setArrow,\r\n}\r\n\r\nexport default connect(mapState, mapDispatch)(App)","export const setStartingCell = id => ({\r\n    type: 'SET_START_CELL',\r\n    payload: id,\r\n})","export const setCurrentCell = id => ({\r\n    type: 'SET_CURRENT_CELL',\r\n    payload: id,\r\n})","export const setArrow = (arrowDirection, count) => ({\r\n    type: 'SET_ARROW',\r\n    payload: {\r\n        arrowDirection,\r\n        count,\r\n    },\r\n})","const initialState = {\r\n    startingCell: '',\r\n}\r\n\r\nexport const startingCellReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_START_CELL':\r\n            return {\r\n                ...state,\r\n                startingCell: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","const initialState = {\r\n    currentCell: '',\r\n}\r\n\r\nexport const currentCellReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_CELL':\r\n            return {\r\n                ...state,\r\n                currentCell: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","const initialState = {\r\n    arrows: [],\r\n    count: 0,\r\n}\r\n\r\nconst arrowsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_ARROW':\r\n            return {\r\n                arrows: [\r\n                    ...state.arrows,\r\n                    action.payload.arrowDirection,\r\n                ]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default arrowsReducer;","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport { startingCellReducer } from './reducers/startCellReducer';\r\nimport { currentCellReducer } from './reducers/currentCellReducer';\r\nimport arrowsReducer from './reducers/arrowsReducer';\r\n\r\nconst reducers = combineReducers({\r\n    startingCell: startingCellReducer,\r\n    currentCell: currentCellReducer,\r\n    arrows: arrowsReducer,\r\n})\r\n\r\nconst composeEnhancers =\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    || compose\r\n\r\nexport default createStore(\r\n    reducers,\r\n    composeEnhancers(applyMiddleware()));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}